const { Client, GatewayIntentBits, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
const moment = require('moment');
const { readdirSync } = require('fs');

// Initialize the client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildPresences
    ]
});

// Command collection and cooldowns
client.commands = new Collection();
client.cooldowns = new Collection();

// Prefix for commands
const PREFIX = '!wave';

// Path to commands directory
const COMMANDS_DIR = path.join(__dirname, 'commands');

// Load commands
const loadCommands = () => {
    client.commands.clear();  // Clear the previous commands
    const commandFiles = readdirSync(COMMANDS_DIR).filter(file => file.endsWith('.js'));
    for (const file of commandFiles) {
        const command = require(path.join(COMMANDS_DIR, file));
        client.commands.set(command.name, command);
    }
    console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Loaded ${client.commands.size} commands.`);
};

// Reload commands
const reloadCommands = () => {
    console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Reloading commands...`);
    loadCommands();
};

// Initial load of commands
loadCommands();

// Event: Bot is ready
client.once('ready', () => {
    console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Bot is online as ${client.user.tag}`);
    client.user.setActivity('the waves', { type: 'LISTENING' });
    setInterval(() => {
        console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Bot is still active.`);
    }, 3600000); // Log every hour
});

// Event: Message creation
client.on('messageCreate', async message => {
    if (!message.content.startsWith(PREFIX) || message.author.bot) return;

    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    const command = client.commands.get(commandName)
        || client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));

    if (!command) return;

    if (command.guildOnly && message.channel.type !== 'GUILD_TEXT') {
    return message.reply('I can\'t execute that command inside DMs!');
    }

    if (command.permissions) {
        const authorPerms = message.channel.permissionsFor(message.author);
        if (!authorPerms || !authorPerms.has(command.permissions)) {
            return message.reply('You do not have permissions to execute this command.');
        }
    }

    if (command.args && !args.length) {
        let reply = `You didn't provide any arguments, ${message.author}!`;
        if (command.usage) {
            reply += `\nThe proper usage would be: \`${PREFIX}${command.name} ${command.usage}\``;
        }
        return message.channel.send(reply);
    }

    const { cooldowns } = client;

    if (!cooldowns.has(command.name)) {
        cooldowns.set(command.name, new Collection());
    }

    const now = Date.now();
    const timestamps = cooldowns.get(command.name);
    const cooldownAmount = (command.cooldown || 3) * 1000;

    if (timestamps.has(message.author.id)) {
        const expirationTime = timestamps.get(message.author.id) + cooldownAmount;

        if (now < expirationTime) {
            const timeLeft = (expirationTime - now) / 1000;
            return message.reply(`Please wait ${timeLeft.toFixed(1)} more second(s) before reusing the \`${command.name}\` command.`);
        }
    }

    timestamps.set(message.author.id, now);
    setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);

    try {
        await command.execute(message, args);
    } catch (error) {
        console.error(error);
        message.reply('There was an error trying to execute that command!');
    }
});

// Event: Handling errors
client.on('error', console.error);
client.on('warn', console.warn);

// Watch for file changes to reload commands
fs.watch(COMMANDS_DIR, (eventType, filename) => {
    if (filename && filename.endsWith('.js')) {
        console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Detected changes in commands directory. Reloading commands...`);
        reloadCommands();
    }
});

// Handle process exit
process.on('SIGINT', () => {
    console.log('Received SIGINT. Exiting...');
    client.destroy();
    process.exit();
});

process.on('SIGTERM', () => {
    console.log('Received SIGTERM. Exiting...');
    client.destroy();
    process.exit();
});

// Log in to Discord
client.login('YOUR_BOT_TOKEN_HERE').then(() => {
    console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Successfully logged in as ${client.user.tag}`);
}).catch(console.error);
