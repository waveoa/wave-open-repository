const { Client, GatewayIntentBits, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
const moment = require('moment');

// Initialize the bot
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildPresences
    ]
});

client.commands = new Collection();
client.cooldowns = new Collection();
client.prefix = '!wave';

// Load commands
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
    const command = require(`./commands/${file}`);
    client.commands.set(command.name, command);
}

// Event handlers
client.once('ready', () => {
    console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Wave bot is online!`);
    client.user.setActivity('the waves', { type: 'LISTENING' });
});

client.on('messageCreate', async message => {
    if (!message.content.startsWith(client.prefix) || message.author.bot) return;

    const args = message.content.slice(client.prefix.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    const command = client.commands.get(commandName)
        || client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));

    if (!command) return;

    if (command.guildOnly && message.channel.type !== 'GUILD_TEXT') {
        return message.reply('I can\'t execute that command inside DMs!');
    }

    if (command.permissions) {
        const authorPerms = message.channel.permissionsFor(message.author);
        if (!authorPerms || !authorPerms.has(command.permissions)) {
            return message.reply('You do not have permissions to execute this command.');
        }
    }

    if (command.args && !args.length) {
        let reply = `You didn't provide any arguments, ${message.author}!`;
        if (command.usage) {
            reply += `\nThe proper usage would be: \`${client.prefix}${command.name} ${command.usage}\``;
        }
        return message.channel.send(reply);
    }

    const { cooldowns } = client;

    if (!cooldowns.has(command.name)) {
        cooldowns.set(command.name, new Collection());
    }

    const now = Date.now();
    const timestamps = cooldowns.get(command.name);
    const cooldownAmount = (command.cooldown || 3) * 1000;

    if (timestamps.has(message.author.id)) {
        const expirationTime = timestamps.get(message.author.id) + cooldownAmount;

        if (now < expirationTime) {
            const timeLeft = (expirationTime - now) / 1000;
            return message.reply(`Please wait ${timeLeft.toFixed(1)} more second(s) before reusing the \`${command.name}\` command.`);
        }
    }

    timestamps.set(message.author.id, now);
    setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);

    try {
        await command.execute(message, args);
    } catch (error) {
        console.error(error);
        message.reply('There was an error trying to execute that command!');
    }
});

client.on('guildMemberAdd', member => {
    const welcomeChannel = member.guild.channels.cache.find(channel => channel.name === 'welcome');
    if (!welcomeChannel) return;
    welcomeChannel.send(`Welcome to the server, ${member.user.tag}! Make sure to read the rules and have fun! ðŸŒŠ`);
});

client.on('guildMemberRemove', member => {
    const goodbyeChannel = member.guild.channels.cache.find(channel => channel.name === 'goodbye');
    if (!goodbyeChannel) return;
    goodbyeChannel.send(`${member.user.tag} has left the server. Farewell! ðŸŒŠ`);
});

client.on('voiceStateUpdate', (oldState, newState) => {
    if (!oldState.channel && newState.channel) {
        console.log(`${newState.member.user.tag} joined voice channel ${newState.channel.name}`);
    } else if (oldState.channel && !newState.channel) {
        console.log(`${oldState.member.user.tag} left voice channel ${oldState.channel.name}`);
    }
});

client.on('guildCreate', guild => {
    console.log(`Joined new guild: ${guild.name}`);
    const defaultChannel = guild.channels.cache.find(channel => channel.type === 'GUILD_TEXT');
    if (defaultChannel) {
        defaultChannel.send('Hello! I am Wave, your new bot! ðŸŒŠ');
    }
});

client.on('guildDelete', guild => {
    console.log(`Left guild: ${guild.name}`);
});

client.on('error', console.error);
client.on('warn', console.warn);

// Command Files
const commandsDir = path.join(__dirname, 'commands');
if (!fs.existsSync(commandsDir)) {
    fs.mkdirSync(commandsDir);
}

// Example Commands
const /wave = `
module.exports = {
    name: 'wave',
    description: 'Sends a wave back to the user!',
    cooldown: 5,
    execute(message, args) {
        message.channel.send('ðŸŒŠ Hello there!');
    },
};
`;

const pingCommand = `
module.exports = {
    name: 'ping',
    description: 'Ping!',
    cooldown: 10,
    execute(message) {
        message.channel.send('Pong!');
    },
};
`;

const jokeCommand = `
module.exports = {
    name: 'joke',
    description: 'Tells a random joke.',
    cooldown: 10,
    execute(message) {
        const jokes = [
            'Why donâ€™t scientists trust atoms? Because they make up everything!',
            'Why did the scarecrow win an award? Because he was outstanding in his field!',
            'What do you call fake spaghetti? An impasta!',
        ];
        const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
        message.channel.send(randomJoke);
    },
};
`;

const avatarCommand = `
module.exports = {
    name: 'avatar',
    description: 'Displays the avatar of the user.',
    args: true,
    usage: '<user>',
    execute(message, args) {
        const user = message.mentions.users.first() || message.author;
        message.channel.send(user.displayAvatarURL({ format: 'png', dynamic: true }));
    },
};
`;

const serverInfoCommand = `
module.exports = {
    name: 'serverinfo',
    description: 'Displays information about the server.',
    execute(message) {
        const server = message.guild;
        const info = \`Server name: ${server.name}\nTotal members: ${server.memberCount}\nRegion: ${server.region}\`;
        message.channel.send(info);
    },
};
`;

fs.writeFileSync(path.join(commandsDir, 'wave.js'), exampleCommand);
fs.writeFileSync(path.join(commandsDir, 'ping.js'), pingCommand);
fs.writeFileSync(path.join(commandsDir, 'joke.js'), jokeCommand);
fs.writeFileSync(path.join(commandsDir, 'avatar.js'), avatarCommand);
fs.writeFileSync(path.join(commandsDir, 'serverinfo.js'), serverInfoCommand);

// Login to Discord
client.login('MTI3NDIwNDE4MjM5NTQ5MDQwNQ.G3GSpv.Uzi_wM-IhcMCoPCs3WNB_dp83_P_EhODT_1Uyw').then(() => {
    console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] Successfully logged in as ${client.user.tag}`);
}).catch(console.error);

// Handle process exit
process.on('SIGINT', () => {
    console.log('Received SIGINT. Exiting...');
    client.destroy();
    process.exit();
});

process.on('SIGTERM', () => {
    console.log('Received SIGTERM. Exiting...');
    client.destroy();
    process.exit();
});
